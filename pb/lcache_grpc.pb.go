// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.30.0--rc1
// source: lcache.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LcacheProClient is the client API for LcachePro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LcacheProClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error)
	Set(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForDelete, error)
}

type lcacheProClient struct {
	cc grpc.ClientConnInterface
}

func NewLcacheProClient(cc grpc.ClientConnInterface) LcacheProClient {
	return &lcacheProClient{cc}
}

func (c *lcacheProClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error) {
	out := new(ResponseForGet)
	err := c.cc.Invoke(ctx, "/pb.lcache_pro/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcacheProClient) Set(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error) {
	out := new(ResponseForGet)
	err := c.cc.Invoke(ctx, "/pb.lcache_pro/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lcacheProClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForDelete, error) {
	out := new(ResponseForDelete)
	err := c.cc.Invoke(ctx, "/pb.lcache_pro/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LcacheProServer is the server API for LcachePro service.
// All implementations must embed UnimplementedLcacheProServer
// for forward compatibility
type LcacheProServer interface {
	Get(context.Context, *Request) (*ResponseForGet, error)
	Set(context.Context, *Request) (*ResponseForGet, error)
	Delete(context.Context, *Request) (*ResponseForDelete, error)
	mustEmbedUnimplementedLcacheProServer()
}

// UnimplementedLcacheProServer must be embedded to have forward compatible implementations.
type UnimplementedLcacheProServer struct {
}

func (UnimplementedLcacheProServer) Get(context.Context, *Request) (*ResponseForGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLcacheProServer) Set(context.Context, *Request) (*ResponseForGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedLcacheProServer) Delete(context.Context, *Request) (*ResponseForDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLcacheProServer) mustEmbedUnimplementedLcacheProServer() {}

// UnsafeLcacheProServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LcacheProServer will
// result in compilation errors.
type UnsafeLcacheProServer interface {
	mustEmbedUnimplementedLcacheProServer()
}

func RegisterLcacheProServer(s grpc.ServiceRegistrar, srv LcacheProServer) {
	s.RegisterService(&LcachePro_ServiceDesc, srv)
}

func _LcachePro_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcacheProServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.lcache_pro/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcacheProServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcachePro_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcacheProServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.lcache_pro/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcacheProServer).Set(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LcachePro_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LcacheProServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.lcache_pro/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LcacheProServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LcachePro_ServiceDesc is the grpc.ServiceDesc for LcachePro service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LcachePro_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.lcache_pro",
	HandlerType: (*LcacheProServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LcachePro_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _LcachePro_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LcachePro_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lcache.proto",
}
